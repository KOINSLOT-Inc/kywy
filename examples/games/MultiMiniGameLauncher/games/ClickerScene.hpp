// SPDX-FileCopyrightText: 2025 KOINSLOT, Inc.
//
// SPDX-License-Identifier: GPL-3.0-or-later

#ifndef CLICKER_SCENE_HPP
#define CLICKER_SCENE_HPP

#include <Kywy.hpp>

using namespace Kywy;

// Cookie bitmap data from existing cookie.hpp
#define COOKIE_WIDTH 144
#define COOKIE_HEIGHT 168

uint8_t cookie_data[3024] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFA, 0xAD, 0xB6, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xEF, 0x77, 0x5C, 0xF5, 0x7F,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xB5, 0xAA, 0xE9, 0xAA, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xD5, 0x51, 0x55, 0x2B,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xEE, 0xB4, 0xAE, 0xAE, 0xEA, 0xB5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBB, 0x4A, 0xD5, 0x55, 0x55, 0x4A,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xED, 0x35, 0x6B, 0xAA, 0xAA, 0xA9, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xDA, 0xAD, 0x55, 0x55, 0x54,
  0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7,
  0xEA, 0x65, 0x52, 0xA9, 0xAA, 0xAA, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x55, 0x52, 0x29, 0x46, 0xD5, 0x54,
  0x0B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
  0xAA, 0x15, 0xD6, 0xA5, 0x6A, 0xA0, 0x15, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0xD5, 0x42, 0xA5, 0x56, 0xB5, 0x00,
  0x2A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69,
  0x6A, 0x85, 0x52, 0xA9, 0x52, 0x00, 0x31, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xDA, 0xA4, 0x12, 0xA9, 0x56, 0xA9, 0x00,
  0x4A, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x61,
  0x50, 0x00, 0x56, 0xAB, 0x51, 0x48, 0x28, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x21, 0x40, 0x00, 0xAA, 0x94, 0xAA, 0xA0,
  0x55, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0x42,
  0x80, 0x01, 0x55, 0x52, 0x55, 0x10, 0x2A, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0x10, 0x40, 0x02, 0xAA, 0xA8, 0x02, 0x40,
  0xB4, 0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0x02,
  0x88, 0x0F, 0xF5, 0x28, 0x05, 0x00, 0x48, 0x87, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xD9, 0x01, 0x74, 0x0F, 0xEA, 0xD0, 0x40, 0xA0,
  0x3A, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0x00,
  0xDB, 0x0F, 0xF1, 0x68, 0x80, 0x10, 0x54, 0x83, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0x01, 0xFF, 0x87, 0xD1, 0xF0, 0x00, 0x20,
  0x38, 0x21, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB4, 0x01,
  0xFF, 0x02, 0xA3, 0xF8, 0x08, 0x00, 0x75, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0x03, 0xF7, 0xA9, 0x03, 0xF4, 0x10, 0x20,
  0x6A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB4, 0x07,
  0xFF, 0xD6, 0x87, 0xE6, 0x20, 0x00, 0x75, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x7A, 0x1F, 0xFF, 0xEF, 0x5F, 0xFE, 0x20, 0x00,
  0xD2, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xD4, 0xFF,
  0xBF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0xEC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xA9, 0xFD, 0xFF, 0xEF, 0xFF, 0xFE, 0x00, 0x00,
  0x82, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xD3, 0xFB,
  0x77, 0xE7, 0xFF, 0xFF, 0xE0, 0x01, 0x08, 0x34, 0x2F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFD, 0x25, 0xED, 0xFF, 0xEF, 0xFF, 0xEF, 0xD0, 0x02,
  0x69, 0x50, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x57, 0x83,
  0xF7, 0xE7, 0xFF, 0xBD, 0xAC, 0x00, 0x7E, 0xA0, 0x0F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF5, 0x7F, 0x06, 0xEF, 0xEF, 0xFD, 0x57, 0x54, 0x00,
  0xE9, 0x40, 0x15, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0xEA, 0x07,
  0xFF, 0xCF, 0xD6, 0xED, 0xAA, 0x01, 0xD4, 0x00, 0x0B, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF7, 0xD4, 0x05, 0xF5, 0x3F, 0x03, 0x56, 0xD4, 0x01,
  0xAA, 0x80, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xE8, 0x0B,
  0xFA, 0x7E, 0x02, 0xAB, 0x6A, 0x03, 0xD5, 0x00, 0x03, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xEF, 0x50, 0x0E, 0xD4, 0x38, 0x01, 0x55, 0x94, 0x87,
  0xAA, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD3, 0xA8, 0x17,
  0xE9, 0x70, 0x00, 0xAA, 0x49, 0x0F, 0x54, 0x40, 0x07, 0x7F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFE, 0xD2, 0x0D, 0x50, 0x18, 0x01, 0x55, 0x22, 0x86,
  0xAA, 0x80, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0x68, 0x16,
  0x82, 0x20, 0x00, 0x2A, 0x45, 0x47, 0x54, 0x00, 0x05, 0xBF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xD6, 0xB4, 0x3A, 0xA5, 0x14, 0x00, 0x10, 0x12, 0xA5,
  0xAA, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x50, 0x15,
  0x7E, 0x28, 0x00, 0x24, 0x45, 0x47, 0x54, 0x00, 0x01, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF5, 0xAC, 0xD9, 0xDB, 0x04, 0x00, 0x01, 0x0A, 0x8E,
  0xAA, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0xD7, 0x31,
  0xAD, 0x04, 0x00, 0x02, 0x55, 0x1F, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xED, 0x7A, 0x57, 0xD2, 0x85, 0x00, 0x08, 0x0A, 0x3E,
  0xAA, 0x40, 0x01, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xAD, 0x2F,
  0x7D, 0x00, 0x44, 0x21, 0x54, 0x7D, 0x54, 0x80, 0x00, 0xBF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xDB, 0x56, 0x9E, 0xAB, 0x81, 0x11, 0x44, 0xAA, 0xFE,
  0xEA, 0x10, 0x00, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0xAB, 0x7D,
  0x57, 0x04, 0xAA, 0x2A, 0x54, 0x7B, 0x55, 0x40, 0x00, 0x3F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xD6, 0xD0, 0x7E, 0xAE, 0x82, 0x35, 0x95, 0xAE, 0xF6,
  0xAA, 0x84, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x6A, 0x5D,
  0x57, 0x20, 0x55, 0x6B, 0x75, 0xED, 0xD5, 0x50, 0x00, 0x6F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xB5, 0xB1, 0x7A, 0xAF, 0xC0, 0x2A, 0xB7, 0xA9, 0xDF,
  0x68, 0xA1, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xD2, 0x74,
  0x15, 0x60, 0x3D, 0x5F, 0x73, 0xBB, 0xB6, 0x44, 0x00, 0x6F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xDD, 0x62, 0x78, 0x2B, 0xD2, 0xBA, 0xB7, 0xEF, 0x7E,
  0xD2, 0xA8, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xA5, 0xA8,
  0x15, 0xE9, 0xBD, 0x7D, 0xD5, 0xFD, 0x6D, 0x50, 0x00, 0x3F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xD5, 0xC9, 0xF4, 0x2B, 0x75, 0xFE, 0xDB, 0x6F, 0xFF,
  0xB6, 0xA8, 0x80, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xA5, 0x52,
  0x85, 0xD3, 0xEB, 0x76, 0xDF, 0xBB, 0xDB, 0x50, 0x00, 0x3F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xD5, 0x49, 0xA9, 0x0B, 0xDF, 0xF5, 0x5D, 0xEF, 0xF6,
  0xED, 0x24, 0x80, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0x80, 0xD4,
  0x97, 0x4F, 0x5A, 0xA2, 0x8F, 0xFD, 0xB2, 0x88, 0x00, 0x2F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFB, 0x68, 0xAA, 0x4A, 0x9D, 0xAB, 0x41, 0xCF, 0xFF,
  0xDC, 0x40, 0x00, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE5, 0x54, 0x55,
  0x15, 0x3A, 0x54, 0x01, 0x0F, 0xFA, 0xAA, 0x24, 0x00, 0x2B, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFA, 0xA8, 0x6A, 0x9A, 0x74, 0x00, 0x58, 0x0F, 0x55,
  0x54, 0x80, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0x54, 0x95,
  0x54, 0x68, 0x00, 0x24, 0x1F, 0xFE, 0xA8, 0x28, 0x00, 0x1F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF6, 0xAA, 0x2A, 0xAA, 0x50, 0x00, 0x00, 0x0A, 0xFB,
  0xD0, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x54, 0x15,
  0x54, 0x60, 0x40, 0x00, 0x05, 0xED, 0x40, 0x00, 0x00, 0x1F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFD, 0x80, 0x35, 0x2A, 0xA0, 0x80, 0x00, 0x0B, 0x56,
  0x80, 0x20, 0x00, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD4, 0x18, 0x2A,
  0x94, 0xC0, 0x40, 0x00, 0xD4, 0x09, 0x40, 0x00, 0x00, 0xAB, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFB, 0x25, 0x15, 0x51, 0x40, 0x00, 0x07, 0x68, 0x02,
  0x80, 0x00, 0x00, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0xDA, 0x82,
  0x16, 0x80, 0x00, 0x0B, 0xFE, 0xF0, 0x00, 0x00, 0x00, 0xAF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFA, 0x55, 0x78, 0x09, 0x28, 0x00, 0x1F, 0xFD, 0x70,
  0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0xAA, 0x86,
  0x54, 0x90, 0x00, 0x1F, 0x7E, 0xF0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF6, 0x55, 0x2F, 0x8A, 0x08, 0x00, 0x3F, 0x3F, 0xE9,
  0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xAA, 0x03,
  0x54, 0x04, 0x00, 0x3F, 0x3F, 0xF6, 0x00, 0x08, 0x02, 0x1F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFC, 0xD5, 0x03, 0x0A, 0x08, 0x00, 0x5A, 0xBF, 0xD0,
  0x80, 0x10, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x2A, 0x01,
  0x85, 0x40, 0x00, 0x6F, 0x5B, 0x6D, 0x00, 0x20, 0x00, 0xAF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFC, 0xB4, 0x00, 0x46, 0x80, 0x85, 0x5D, 0x97, 0xB2,
  0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x48, 0x00,
  0x02, 0x00, 0x06, 0xB6, 0xCE, 0xC8, 0x00, 0x20, 0x00, 0xEF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFD, 0x2A, 0x00, 0x05, 0x00, 0x03, 0xDB, 0xB5, 0xA0,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x94, 0x00,
  0x02, 0x00, 0x02, 0xB5, 0xEB, 0x50, 0x00, 0x00, 0x05, 0x5F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x4A, 0x00, 0x00, 0x00, 0x03, 0xBA, 0xD6, 0xA4,
  0x10, 0x00, 0x0A, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xA5, 0x40,
  0x00, 0x20, 0x03, 0x37, 0xB5, 0x10, 0x28, 0x00, 0x05, 0x7F, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x80, 0x03, 0x40, 0x0A, 0xBD, 0x56, 0xA0,
  0x50, 0x00, 0x02, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0x00,
  0x06, 0x80, 0x05, 0x57, 0xA5, 0x00, 0x20, 0x00, 0x21, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x32, 0x7D, 0x40, 0x12, 0x2B, 0xD2, 0x41,
  0x40, 0x00, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA2, 0x2B,
  0x56, 0x80, 0x09, 0x3D, 0x65, 0x28, 0x00, 0x00, 0x25, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xD4, 0x15, 0xAA, 0x20, 0x04, 0x2A, 0xB9, 0x40,
  0x00, 0x00, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xAA,
  0xD5, 0x40, 0x00, 0x35, 0x49, 0x00, 0x00, 0x01, 0x0F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0x55, 0x2A, 0xA0, 0x00, 0xD6, 0xA4, 0x20,
  0x00, 0x02, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE2, 0x8A,
  0xD5, 0xD0, 0x04, 0xAB, 0x50, 0x00, 0x00, 0x01, 0x0F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x11, 0x2B, 0x40, 0x2A, 0x74, 0xAA, 0x00,
  0x00, 0x04, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x84,
  0xD7, 0xA7, 0x57, 0x9A, 0x90, 0xA0, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x22, 0x2A, 0xCC, 0xAA, 0x95, 0x45, 0x00,
  0x00, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x09,
  0x55, 0xAF, 0x55, 0x4A, 0xA8, 0x00, 0x00, 0x29, 0x7F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x84, 0x8B, 0x4C, 0xAA, 0xA5, 0x40, 0x00,
  0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x12,
  0x15, 0x8A, 0x55, 0x4A, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xAA, 0x8C, 0xAA, 0xA4, 0x00, 0x00,
  0x01, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
  0x15, 0x12, 0x14, 0x01, 0x00, 0x00, 0x02, 0x57, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD0, 0x02, 0x88, 0x00, 0x04, 0x00, 0x00,
  0x01, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
  0x00, 0x80, 0x00, 0x08, 0x00, 0x00, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x15, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFD, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x45,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xF4, 0x00, 0x00, 0x00, 0x3B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0x40, 0x00, 0x07, 0x5F,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xF6, 0x85, 0xAF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xDF, 0xDF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

class ClickerScene : public Scene, public Actor::Actor {
public:
  // Game variables - these store our game information
  int cookieCount = 0;            // How many cookies we've clicked
  bool showAnimation = false;     // Should we show the click animation?
  int animationTime = 0;          // How long has the animation been running?
  bool wasButtonPressed = false;  // Was the button pressed last time we checked?

  // Where to draw the cookie on screen
  int cookieX = KYWY_DISPLAY_WIDTH / 2;   // Middle of screen horizontally
  int cookieY = KYWY_DISPLAY_HEIGHT / 2;  // Middle of screen vertically

public:
  ClickerScene() : Scene(false, true) {}

  virtual void initialize() override {
    // Don't subscribe to input here - do it in onEnter to avoid early activation
  }

  virtual void onEnter() override {
    cookieCount = 0;
    showAnimation = false;
    animationTime = 0;
    wasButtonPressed = false;
    add(this);
    
    // Start the actor (this calls initialize())
    this->start();
    
    // Subscribe to input AFTER starting the actor
    this->subscribe(&Scene::getEngine()->input);
    
    updateDisplay();
  }

  void updateDisplay() {
    Display::Display& display = Scene::getEngine()->display;
    
    // Clear the screen
    display.clear();

    // Draw the score at the top
    String scoreText = "Cookies: " + String(cookieCount);
    display.drawText(cookieX, 20, scoreText.c_str(),
                     Display::TextOptions().origin(Display::Origin::Text::CENTER));

    // Draw the cookie picture in the center
    display.drawBitmap(
      cookieX - COOKIE_WIDTH / 2,   // Left edge of cookie
      cookieY - COOKIE_HEIGHT / 2,  // Top edge of cookie
      COOKIE_WIDTH, COOKIE_HEIGHT,
      (uint8_t*)cookie_data);

    // Draw click animation (circles around cookie when clicked)
    if (showAnimation) {
      int circleSize = 70 + (animationTime * 2);  // Circle grows bigger over time
      display.drawCircle(cookieX, cookieY, circleSize,
                         Display::Object2DOptions().origin(Display::Origin::Object2D::CENTER));
    }

    // Draw instructions
    Display::TextOptions textOptions;
    textOptions._color = 0x00;
    textOptions._origin = Display::Origin::Text::BASELINE_LEFT;
    textOptions._font = Display::Font::intel_one_mono_8_pt;
    

    // Show everything on screen
    display.update();
  }

  void handle(::Actor::Message* message) override {
    switch (message->signal) {
      case Kywy::Events::BUTTON_LEFT_PRESSED:
      case Kywy::Events::D_PAD_LEFT_PRESSED:
        Scene::triggerExit();
        return;
        
      case Kywy::Events::BUTTON_RIGHT_PRESSED:
        // Check if RIGHT button was just pressed (not held down)
        // Only count if button is pressed now AND was not pressed before
        if (!wasButtonPressed) {  // Button was just pressed and was not pressed during the last loop
          cookieCount++;                                             // Add one more cookie
          showAnimation = true;                                      // Start the click animation
          animationTime = 0;                                         // Reset animation timer
          updateDisplay();
        }
        wasButtonPressed = true;
        break;
        
      case Kywy::Events::BUTTON_RIGHT_RELEASED:
        wasButtonPressed = false;
        break;
        
      case Kywy::Events::TICK:
        // Update the animation
        if (showAnimation) {
          animationTime++;
          if (animationTime > 30) {  // Stop animation after 30 loops
            showAnimation = false;
          }
          updateDisplay();
        }
        break;
    }
  }

  virtual void onExit() override {
    // Immediately clear display before stopping actor
    Display::Display& display = Scene::getEngine()->display;
    display.clear();
    display.update();
    
    // Unsubscribe from input before stopping
    this->unsubscribe(&Scene::getEngine()->input);
    
    // Stop the actor 
    this->stop();
    remove(this);
  }
};

// Global instance for the launcher
ClickerScene clickerScene;

#endif // CLICKER_SCENE_HPP
