# SPDX-FileCopyrightText: 2023 - 2025 KOINSLOT, Inc.
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Check Pull Request
on: pull_request
permissions:
  pull-requests: write
  contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make .clang-format # get arduino .clang-format file
      - uses: jidicula/clang-format-action@v4.15.0 # lint c++ code w/ clang-format
        with:
          clang-format-version: "14"
      - uses: arduino/arduino-lint-action@v2 # lint arduino library requirements
        with:
          compliance: strict
          recursive: true
          library-manager: update
      - uses: fsfe/reuse-action@v1 # lint license requirements

  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build all games
        uses: arduino/compile-sketches@v1
        with:
          fqbn: "arduino:mbed_rp2040:pico"
          sketch-paths: |
            - examples
          sketches-report-path: build_artifacts/sketches_report.json
          verbose: true
          enable-warnings-report: true
          enable-deltas-report: true

      - name: Collect UF2 files
        run: |
          mkdir -p build_artifacts
          find ~/.cache/arduino/ -type f -name '*.uf2' -exec cp {} build_artifacts/ \;

      - name: List built artifacts
        run: |
          echo "Built files:"
          ls -lh build_artifacts

      - name: Upload UF2 build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_artifacts
          path: artifacts/

      - name: Comment UF2 artifact link on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactName = "uf2-artifacts";
            const runId = context.runId;
            const repo = context.repo;
            const artifactsUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`;
      
            const body = `🛠️ Download build artifacts [here](${artifactsUrl}) (look for **${artifactName}**).`;
      
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner,
              repo: repo.repo,
              body: body,
            });

  check-library-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check for src/ or examples/ changes
        id: check_changes
        run: |
          git fetch origin ${{ github.base_ref }}
          if git diff --name-only origin/${{ github.base_ref }} HEAD | grep -qE '^(src|examples)/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: check proposed version bump
        if: steps.check_changes.outputs.changed == 'true'
        id: tag
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          INITIAL_VERSION: 1.0.0
          DRY_RUN: true
          VERBOSE: true
      - name: assert version in library.properties is bumped
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          if [ \
            "$(cat library.properties | grep version | sed 's/version=/v/')" \
            != "${{ steps.tag.outputs.new_tag }}" \
          ]; then \
            new_tag="$(echo '${{ steps.tag.outputs.new_tag }}' | sed 's/v//')"
            echo "bump the version in library.properties to ${new_tag}!"; \
            exit 1; \
          fi

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - run: pip install pipenv
      - run: sudo apt-get install doxygen
      - run: make docs
